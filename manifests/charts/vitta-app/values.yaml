# Default values

# Application specific names
# Please define at least the 'nameOverride' variable when using this chart
nameOverride:
# fullNameOverride:

##
# Pods configuration
##

pods:
  # Mechanism to use to schedule pods
  # Can either be 'deployment', 'statefulset' or 'daemonset'
  controller: deployment

  # Container image to use
  image:
    name:
    tag:
    pullPolicy: Always

  # If you are not using HPAs you can also statically define the amount of replicas
  # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#replicas
  replicas:

  # Specify revisionHistoryLimit (deployments only)
  # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy
  revisionHistoryLimit: 3

  # The update strategy to apply for the deployment, statefulset or daemonset
  ##
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate

  # Custom command to use for the container
  command: []

  # Custom arguments to use for the container
  args: []

  # Additional labels and annotations for the deployment, statefulset or daemonset
  labels: {}
  #  key: value
  annotations: {}
  # key: value

  # Additional labels and annotations for the pods
  podLabels: {}
  #  key: value
  podAnnotations:
    linkerd.io/inject: disabled
  #  key: value

  # Healthcheck probes
  livenessProbe: {}
    # httpGet:
    #   scheme: HTTP
    #   path: /info
    #   port: 80
    # initialDelaySeconds: 30
    # periodSeconds: 5
    # timeoutSeconds: 5

  readinessProbe: {}
    # httpGet:
    #   scheme: HTTP
    #   path: /info
    #   port: 80
    # initialDelaySeconds: 30
    # periodSeconds: 30
    # timeoutSeconds: 5

  # Resources allocation for the containers
  resources:
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 256Mi

  ports:
    - containerPort: 8080

  # Node labels for pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  ## Node tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  # DNS Policy
  dnsPolicy: ClusterFirst

  ## Optional array of imagePullSecrets containing private registry credentials
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets:
    - name: regcred

  # Affinity configuration
  affinity:
    # This allows you to automatically define anti-affinity rules
    antiAffinity:
      enabled: false
      type: hard # Can be either 'hard' or 'soft'
      topologyKey: kubernetes.io/hostname

    rules: {}

  # Environment variables
  env:
    []
    # - name: key
    #   value: val
    # - name: other_key
    #    valueFrom:
    #      configMapKeyRef:
    #        name: config
    #        key: nice-key

  envFrom:
    []
    # - configMapRef:
    #     name: config
    # - secretRef:
    #     name: config

  # Volumes and mounts
  volumes:
    []
    # - name: storage
    #   emptyDir: {}

  volumeMounts:
    []
    # - name: storage
    #   mountPath: /mnt/storage

  # Security
  securityContext: {}

  # Init containers configuration
  initContainers: []

  # Additional containers for the pods
  additionalContainers: []

##
# Image Pull Credentials
##

# Automatically create a secret with the credentials and use it
# Cannot be used in conjunction of pods.imagePullSecrets
imageCredentials:
  {}
  # registry: quay.io
  # username: someone
  # password: sillyness

##
# Horizontal Pod Autoscaler configuration
##

# Only works for 'deployments' and 'statefulsets'
horizontalPodAutoscaler:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetAverageCPUUtilization: 80

##
# Service configuration
##

service:
  enabled: true
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http

##
# Ingress configuration
##

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  path: /
  servicePort: http
  hosts: []
    # - example.com
  tls: []
    # - secretName: wildcard-crt
    #   hosts:
    #     - example.com

##
# Pod Disruption Budget configuration
##

podDisruptionBudget:
  enabled: false
  minAvailable: 1

##
# ConfigMaps management
##

configMaps:
  {}
  # foo:
  #   FOO: bar

##
# Secrets management
##

secrets:
  {}
  # super_secret:
  #   key: sensitive_value
  # dockerconfigjson/image-pull: |
  #   .dockerconfigjson: {}

##
# Service account management
##

serviceAccount:
  create: false
  name: default

# @param mongodb.enabled Whether to install or not the MongoDB; chart
mongodb:
  enabled: false
  auth:
    database: dbname
    password: pass
    username: openinsurance
    rootPassword: passroot
  persistence:
    size: 8Gi

# @param mysql.enabled Whether to install or not the MySQL; chart
mysql:
  enabled: false
  auth:
    database: dbname
    password: pass
    rootPassword: passroot
    username: openinsurance
  primary:
    persistence:
      size: 8Gi
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci

      # performance-schema-consumer-events-statements-history
      performance-schema-consumer-events-statements-history-long=ON

      # innodb
      innodb_rollback_on_timeout=1

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    nodeSelector:
      ec2: OnDemand
